[build-system]
    requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
    build-backend = "poetry.core.masonry.api"


[tool.poetry]
    name = "maite"
    version = "0.0.0"  # just a placeholder to appease poetry, plugin sets dynamically
    description = "Library of common types, protocols (a.k.a. structural subtypes), and utilities to support AI test and evaluation"
    license = "MIT"
    authors = [
        "Justin Goodwin",
        "Michael Yee",
        "Ryan Soklaski",
        "Lei Hamilton" ,
        "Jeff Arena",
        "Garrett Botkin",
        "Manasi Sharma"
    ]
    maintainers = [
        "Justin Goodwin", 
        "Michael Yee",
        "Lei Hamilton",
        "Jeff Arena"
    ]
    readme = "README.md"
    homepage = "https://github.com/mit-ll-ai-technology/maite"
    repository = "https://github.com/mit-ll-ai-technology/maite"
    documentation = "https://mit-ll-ai-technology.github.io/maite/"
    keywords = ["machine learning", "testing", "pytest"]
    classifiers = [  
        "Development Status :: 3 - Alpha",
        "License :: OSI Approved :: MIT License",
        "Operating System :: OS Independent",
        "Intended Audience :: Science/Research",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Topic :: Scientific/Engineering",
        "Programming Language :: Python :: 3 :: Only",
    ]
    include = ["LICENSE.txt", "Contributors.md"]


[tool.poetry.dependencies]
    python = "^3.8"
    typing-extensions = ">= 4.5, != 4.6"
    numpy = ">= 1.17"
    # optional deps (each belongs to at least one extra)
    jupytext = { version = "^1.14.0", optional = true }
    numpydoc = { version = "^1.5.0", optional = true }
    pyright = { version = "^1.1.280", optional = true }
    pytest = { version = "^7.0.0", optional = true }
    hypothesis = { version = "^6.61.0", optional = true }
    pytest-mock = { version = "^3.10.0", optional = true }
    torch = { version = "^1.7,!=1.12.0", optional = true }


[tool.poetry.extras]
    # dependencies required to build all documentation with sphinx
    # (This is required because all classes/functions documented with `autodoc` 
    # and `autosummary` must be importable)
    test = ["jupytext",
            "numpydoc",
            "pyright",
            "pytest",
            "hypothesis",
            "pytest-mock",
            "torch"]

    build_docs = ["torch",
                  "pytest"]
    

[tool.poetry.urls]
    "Bug Reports" = "https://github.com/mit-ll-ai-technology/maite/issues"


[tool.poetry-dynamic-versioning]
    enable = true
    vcs = "git"
    style = "semver"


[tool.isort]
    known_first_party = ["maite", "tests"]
    profile = "black"
    combine_as_imports = true


[tool.coverage.report]
    exclude_lines = [
      'pragma: no cover',
      'def __repr__',
      'raise AssertionError',
      'raise NotImplementedError',
      'class .*\bProtocol(\[.+\])?\):',
      '@(abc\.)?abstractmethod',
      '@(typing\.)?overload',
      'except ImportError',
      'except ModuleNotFoundError',
      'if (typing\.)?TYPE_CHECKING:',
    ]

[tool.pytest.ini_options]
    xfail_strict = true


[tool.pyright]
    include = ["src"]
    exclude = [
      "**/node_modules",
      "**/__pycache__",
      "src/maite/_version.py",
      "tests/conftest.py",
      "tests/test_testing/test_type_checking.py",
      "tests/test_testing/test_project.py",
      "tests/test_protocols.py",
      "tests/dummy_projects"
    ]
    reportUnnecessaryTypeIgnoreComment = true
    reportUnnecessaryIsInstance = false