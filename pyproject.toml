[build-system]
requires = [
  "setuptools >= 35.0.2",
  "wheel >= 0.29.0",
  "setuptools_scm[toml]==7.0.5",
]
build-backend = "setuptools.build_meta"


[project]
name = "jatic_toolbox"
dynamic = ["version"]
description = "Utilities for developing test suites for JATIC-related projects."
readme = "README.md"
requires-python = ">=3.7"
dependencies = [
  "typing-extensions >= 4.1.0",
]

license = { file = "LICENSE.txt" }
keywords = ["machine learning", "testing", "pytest"]

authors = [{ name = "Ryan Soklaski", email = "ryan.soklaski@ll.mit.edu" },
           {name = "Justin Goodwin", email = "jgoodwin@ll.mit.edu" },
           {name = "Michael Yee", email = "myee@ll.mit.edu" },
           ]
maintainers = [{name = "Justin Goodwin", email = "jgoodwin@ll.mit.edu" }]

classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Topic :: Scientific/Engineering",
  "Programming Language :: Python :: 3 :: Only",
]

[project.optional-dependencies]
test = [
  "jupytext >= 1.14.0",
  "numpydoc >= 1.5.0",
  "pyright >= 1.1.280",
  "pytest >= 7.0.0",
  "hypothesis >= 6.61.0",
]

numpy = ["numpy >= 1.17"]

torch=["torch>=1.7,!=1.12.0", "torchvision"]

vision=["Pillow >= 8.2.0"]

hydra_zen = ["hydra-zen >= 0.9.0"]

augly = ["augly[image] >= 1.0.0"]

huggingface = [
  "datasets >= 2.7.1",
  "huggingface-hub >= 0.11.1",
  "transformers >= 4.25.1",
]

timm = ["timm >= 0.6.12"]

smqtk = [
  "smqtk-detection == 0.19.0",
  "opencv-python-headless >= 4.6.0.66",
  "numba >= 0.56.4",
  "pooch >= 1.6.0",
]

all_interop = [
  "numpy >= 1.17",
  "torch>=1.7,!=1.12.0",
  "torchvision",
  "opencv-python-headless >= 4.6.0.66",
  "datasets >= 2.7.1",
  "huggingface-hub >= 0.11.1",
  "hydra-zen >= 0.9.0",
  "pooch >= 1.6.0",
  "smqtk-detection >= 0.19.0",
  "transformers >= 4.25.1",
  "numba >= 0.56.4",
  "timm >= 0.6.12",
  "augly[image] >= 1.0.0"
]

[project.urls]
"Homepage" = "https://llcad-github.llan.ll.mit.edu/AIT/jatic_toolbox/"
"Bug Reports" = "https://llcad-github.llan.ll.mit.edu/AIT/jatic_toolbox/issues"
"Source" = "https://llcad-github.llan.ll.mit.edu/AIT/jatic_toolbox"


[tool.setuptools_scm]
write_to = "src/jatic_toolbox/_version.py"
version_scheme = "no-guess-dev"


[tool.setuptools]
package-dir = { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests*", "tests.*"]

[tool.setuptools.package-data]
jatic_toolbox = ["py.typed"]


[tool.isort]
known_first_party = ["jatic_toolbox", "tests"]
profile = "black"
combine_as_imports = true


[tool.coverage.report]
omit = ["src/jatic_toolbox/_version.py"]
exclude_lines = [
  'pragma: no cover',
  'def __repr__',
  'raise AssertionError',
  'raise NotImplementedError',
  'class .*\bProtocol(\[.+\])?\):',
  '@(abc\.)?abstractmethod',
  '@(typing\.)?overload',
  'except ImportError',
  'except ModuleNotFoundError',
  'if (typing\.)?TYPE_CHECKING:',
]

[tool.pytest.ini_options]
xfail_strict = true


[tool.pyright]
include = ["src"]
exclude = [
  "**/node_modules",
  "**/__pycache__",
  "src/jatic_toolbox/_version.py",
  "tests/conftest.py",
  "tests/test_testing/test_type_checking.py",
  "tests/test_testing/test_project.py",
  "tests/test_protocols.py",
  "tests/dummy_projects"
]
reportUnnecessaryTypeIgnoreComment = true
reportUnnecessaryIsInstance = false


[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = True
envlist = py37, py38, py39, py310

[gh-actions]
python =
  3.7: py37
  3.8: py38
  3.9: py39
  3.10: py310


[testenv]
description = Runs test suite parallelized in the specified python enviornment and
              against number of available processes (up to 4).
              Run `tox -e py39 -- -n 0` to run tests in a python 3.9 with
              parallelization disabled.
passenv = *
deps = pytest-xdist
extras = test
commands = pytest tests/ {posargs: -n auto --maxprocesses=4}


[testenv:min-deps]
description = Runs test suite against minimum supported versions of dependencies.
deps = 
    typing-extensions==4.1.0
    numpy==1.17
    {[testenv]deps}
extras = test
basepython = python3.7


[testenv:interop]
description = Run test with interop.
deps = {[testenv]deps}
extras = 
    test
    all_interop
basepython = python3.9


[testenv:coverage]
description = Runs test suite and measures test-coverage. Fails if coverage is
              below 100 prcnt. Run `tox -e coverage -- -n 0` to disable parallelization.
deps = 
    {[testenv]deps}
    coverage[toml]
    pytest-cov
extras = 
    test
    all_interop
usedevelop = true
basepython = python3.9
setenv = NUMBA_DISABLE_JIT=1
commands = pytest tests/ --cov-report term-missing --cov-config=pyproject.toml --cov-fail-under=100 --cov=jatic_toolbox {posargs: -n auto --maxprocesses=4}

[testenv:scan-docs]
description = Validate that the jatic-toolbox's public API has docstrings that adhere
              to the numpydoc standard, and that their example sections "scan clean"
              under pyright.
commands = pytest tests/test_docstrings.py -vv  {posargs: -n auto --maxprocesses=4}

[testenv:typecheck]
description = Ensure that the jatic-toolbox's source code and test suite scan clean
              under pyright, and that the jatic-toolbox's public API has a 100 prcnt
              type-completeness score.
usedevelop = true
basepython = python3.9
deps = pyright >= 1.1.282
extras = 
    test
    all_interop
commands = 
    pyright --lib src/ tests/
    pyright --ignoreexternal --verifytypes jatic_toolbox

[testenv:enforce-format]
description = Ensures that jatic-toolbox's source materials (code & docs) and test suite
              adhere to formatting and code-quality standards.
skip_install=true
basepython=python3.9
deps=
    black
    isort
    flake8
    codespell
commands=
    black src/ tests/ --diff --check
    isort src/ tests/ --diff --check
    flake8 src/ tests/
    codespell src/ docs/


[testenv:auto-format]
description = Applies auto-flake (e.g. remove unsused imports), black, and isort
              in-place on  the jatic-toolbox's source files and test suite. Running
              this can help fix a failing `enforce-format` run.
skip_install=true
deps =
    autoflake
    black
    isort
commands =
    autoflake --recursive --in-place --remove-duplicate-keys --remove-unused-variables src/ tests/
    isort src/ tests/
    black src/ tests/


[testenv:docs]
description = Uses Sphinx to generate html for the jatic-toolbox's docs. Stores the
              results in `.tox/docs/build/html/`.
basepython=python3.9
changedir=docs
deps=-r{toxinidir}/docs/requirements.txt
commands=
    sphinx-build -b html -d {envtmpdir}/doctrees ./source  {envdir}/build/html
"""
